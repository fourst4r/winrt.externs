package winrt.windows.globalization.datetimeformatting;

@:valueType
@:unreflective
@:structAccess
@:semantics(variable)
@:include("winrt/Windows.Globalization.DateTimeFormatting.h", true)
@:native("winrt::Windows::Globalization::DateTimeFormatting::IDateTimeFormatterFactory")
extern interface IDateTimeFormatterFactory extends winrt.windows.foundation.IInspectable
{
    function CreateDateTimeFormatter(formatTemplate: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>): winrt.windows.globalization.datetimeformatting.DateTimeFormatter;
    function CreateDateTimeFormatterLanguages(formatTemplate: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, languages: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IIterable<winrt.HString> /* temp_GenericTypeInstSig */>): winrt.windows.globalization.datetimeformatting.DateTimeFormatter;
    function CreateDateTimeFormatterContext(formatTemplate: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, languages: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IIterable<winrt.HString> /* temp_GenericTypeInstSig */>, geographicRegion: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, calendar: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, clock: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>): winrt.windows.globalization.datetimeformatting.DateTimeFormatter;
    function CreateDateTimeFormatterDate(yearFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.YearFormat>, monthFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.MonthFormat>, dayFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.DayFormat>, dayOfWeekFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.DayOfWeekFormat>): winrt.windows.globalization.datetimeformatting.DateTimeFormatter;
    function CreateDateTimeFormatterTime(hourFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.HourFormat>, minuteFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.MinuteFormat>, secondFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.SecondFormat>): winrt.windows.globalization.datetimeformatting.DateTimeFormatter;
    function CreateDateTimeFormatterDateTimeLanguages(yearFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.YearFormat>, monthFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.MonthFormat>, dayFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.DayFormat>, dayOfWeekFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.DayOfWeekFormat>, hourFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.HourFormat>, minuteFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.MinuteFormat>, secondFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.SecondFormat>, languages: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IIterable<winrt.HString> /* temp_GenericTypeInstSig */>): winrt.windows.globalization.datetimeformatting.DateTimeFormatter;
    function CreateDateTimeFormatterDateTimeContext(yearFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.YearFormat>, monthFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.MonthFormat>, dayFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.DayFormat>, dayOfWeekFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.DayOfWeekFormat>, hourFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.HourFormat>, minuteFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.MinuteFormat>, secondFormat: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.globalization.datetimeformatting.SecondFormat>, languages: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IIterable<winrt.HString> /* temp_GenericTypeInstSig */>, geographicRegion: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, calendar: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, clock: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>): winrt.windows.globalization.datetimeformatting.DateTimeFormatter;
}
