package winrt.windows.security.authentication.web.provider;

@:include("winrt/Windows.Security.Authentication.Web.Provider.h", true)
@:native("winrt::Windows::Security::Authentication::Web::Provider::WebAccountManager")
extern class WebAccountManager
{
    static function UpdateWebAccountPropertiesAsync(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>, webAccountUserName: cxx.ConstRef<winrt.HString>, additionalProperties: cxx.ConstRef<winrt.windows.foundation.collections.IMapView<winrt.HString, winrt.HString> /* temp_GenericTypeInstSig */>): winrt.windows.foundation.IAsyncAction;
    static function AddWebAccountAsync(webAccountId: cxx.ConstRef<winrt.HString>, webAccountUserName: cxx.ConstRef<winrt.HString>, props: cxx.ConstRef<winrt.windows.foundation.collections.IMapView<winrt.HString, winrt.HString> /* temp_GenericTypeInstSig */>): winrt.windows.foundation.IAsyncOperation<winrt.windows.security.credentials.WebAccount> /* GenericTypeInstSig */;
    static function DeleteWebAccountAsync(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>): winrt.windows.foundation.IAsyncAction;
    static function FindAllProviderWebAccountsAsync(): winrt.windows.foundation.IAsyncOperation<winrt.windows.foundation.collections.IVectorView<winrt.windows.security.credentials.WebAccount> /* GenericTypeInstSig */> /* GenericTypeInstSig */;
    static function PushCookiesAsync(uri: cxx.ConstRef<winrt.windows.foundation.Uri>, cookies: cxx.ConstRef<winrt.windows.foundation.collections.IVectorView<winrt.windows.web.http.HttpCookie> /* temp_GenericTypeInstSig */>): winrt.windows.foundation.IAsyncAction;
    static function SetViewAsync(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>, view: cxx.ConstRef<winrt.windows.security.authentication.web.provider.WebAccountClientView>): winrt.windows.foundation.IAsyncAction;
    static function ClearViewAsync(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>, applicationCallbackUri: cxx.ConstRef<winrt.windows.foundation.Uri>): winrt.windows.foundation.IAsyncAction;
    static function GetViewsAsync(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>): winrt.windows.foundation.IAsyncOperation<winrt.windows.foundation.collections.IVectorView<winrt.windows.security.authentication.web.provider.WebAccountClientView> /* GenericTypeInstSig */> /* GenericTypeInstSig */;
    static function SetWebAccountPictureAsync(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>, webAccountPicture: cxx.ConstRef<winrt.windows.storage.streams.IRandomAccessStream>): winrt.windows.foundation.IAsyncAction;
    static function ClearWebAccountPictureAsync(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>): winrt.windows.foundation.IAsyncAction;
    static function PullCookiesAsync(uriString: cxx.ConstRef<winrt.HString>, callerPFN: cxx.ConstRef<winrt.HString>): winrt.windows.foundation.IAsyncAction;
    static function FindAllProviderWebAccountsForUserAsync(user: cxx.ConstRef<winrt.windows.system.User>): winrt.windows.foundation.IAsyncOperation<winrt.windows.foundation.collections.IVectorView<winrt.windows.security.credentials.WebAccount> /* GenericTypeInstSig */> /* GenericTypeInstSig */;
    static overload function AddWebAccountForUserAsync(user: cxx.ConstRef<winrt.windows.system.User>, webAccountId: cxx.ConstRef<winrt.HString>, webAccountUserName: cxx.ConstRef<winrt.HString>, props: cxx.ConstRef<winrt.windows.foundation.collections.IMapView<winrt.HString, winrt.HString> /* temp_GenericTypeInstSig */>): winrt.windows.foundation.IAsyncOperation<winrt.windows.security.credentials.WebAccount> /* GenericTypeInstSig */;
    static overload function AddWebAccountForUserAsync(user: cxx.ConstRef<winrt.windows.system.User>, webAccountId: cxx.ConstRef<winrt.HString>, webAccountUserName: cxx.ConstRef<winrt.HString>, props: cxx.ConstRef<winrt.windows.foundation.collections.IMapView<winrt.HString, winrt.HString> /* temp_GenericTypeInstSig */>, scope: cxx.ConstRef<winrt.windows.security.authentication.web.provider.WebAccountScope>): winrt.windows.foundation.IAsyncOperation<winrt.windows.security.credentials.WebAccount> /* GenericTypeInstSig */;
    static overload function AddWebAccountForUserAsync(user: cxx.ConstRef<winrt.windows.system.User>, webAccountId: cxx.ConstRef<winrt.HString>, webAccountUserName: cxx.ConstRef<winrt.HString>, props: cxx.ConstRef<winrt.windows.foundation.collections.IMapView<winrt.HString, winrt.HString> /* temp_GenericTypeInstSig */>, scope: cxx.ConstRef<winrt.windows.security.authentication.web.provider.WebAccountScope>, perUserWebAccountId: cxx.ConstRef<winrt.HString>): winrt.windows.foundation.IAsyncOperation<winrt.windows.security.credentials.WebAccount> /* GenericTypeInstSig */;
    static function InvalidateAppCacheForAllAccountsAsync(): winrt.windows.foundation.IAsyncAction;
    static function InvalidateAppCacheForAccountAsync(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>): winrt.windows.foundation.IAsyncAction;
    static function AddWebAccountAsync(webAccountId: cxx.ConstRef<winrt.HString>, webAccountUserName: cxx.ConstRef<winrt.HString>, props: cxx.ConstRef<winrt.windows.foundation.collections.IMapView<winrt.HString, winrt.HString> /* temp_GenericTypeInstSig */>, scope: cxx.ConstRef<winrt.windows.security.authentication.web.provider.WebAccountScope>, perUserWebAccountId: cxx.ConstRef<winrt.HString>): winrt.windows.foundation.IAsyncOperation<winrt.windows.security.credentials.WebAccount> /* GenericTypeInstSig */;
    static function SetPerAppToPerUserAccountAsync(perAppAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>, perUserWebAccountId: cxx.ConstRef<winrt.HString>): winrt.windows.foundation.IAsyncAction;
    static function GetPerUserFromPerAppAccountAsync(perAppAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>): winrt.windows.foundation.IAsyncOperation<winrt.windows.security.credentials.WebAccount> /* GenericTypeInstSig */;
    static function ClearPerUserFromPerAppAccountAsync(perAppAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>): winrt.windows.foundation.IAsyncAction;
    static function AddWebAccountAsync(webAccountId: cxx.ConstRef<winrt.HString>, webAccountUserName: cxx.ConstRef<winrt.HString>, props: cxx.ConstRef<winrt.windows.foundation.collections.IMapView<winrt.HString, winrt.HString> /* temp_GenericTypeInstSig */>, scope: cxx.ConstRef<winrt.windows.security.authentication.web.provider.WebAccountScope>): winrt.windows.foundation.IAsyncOperation<winrt.windows.security.credentials.WebAccount> /* GenericTypeInstSig */;
    static function SetScopeAsync(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>, scope: cxx.ConstRef<winrt.windows.security.authentication.web.provider.WebAccountScope>): winrt.windows.foundation.IAsyncAction;
    static function GetScope(webAccount: cxx.ConstRef<winrt.windows.security.credentials.WebAccount>): winrt.windows.security.authentication.web.provider.WebAccountScope;
}
