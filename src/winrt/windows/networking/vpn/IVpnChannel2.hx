package winrt.windows.networking.vpn;

@:valueType
@:unreflective
@:structAccess
@:semantics(variable)
@:include("winrt/Windows.Networking.Vpn.h", true)
@:native("winrt::Windows::Networking::Vpn::IVpnChannel2")
extern interface IVpnChannel2 extends winrt.windows.foundation.IInspectable
{
    function StartWithMainTransport(assignedClientIPv4list: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IVectorView<winrt.windows.networking.HostName> /* temp_GenericTypeInstSig */>, assignedClientIPv6list: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IVectorView<winrt.windows.networking.HostName> /* temp_GenericTypeInstSig */>, vpnInterfaceId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnInterfaceId>, assignedRoutes: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnRouteAssignment>, assignedDomainName: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnDomainNameAssignment>, mtuSize: #if reflaxe.cpp cxx.num. #else cpp. #end UInt32, maxFrameSize: #if reflaxe.cpp cxx.num. #else cpp. #end UInt32, Reserved: Bool, mainOuterTunnelTransport: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.IInspectable>): Void;
    function StartExistingTransports(assignedClientIPv4list: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IVectorView<winrt.windows.networking.HostName> /* temp_GenericTypeInstSig */>, assignedClientIPv6list: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IVectorView<winrt.windows.networking.HostName> /* temp_GenericTypeInstSig */>, vpnInterfaceId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnInterfaceId>, assignedRoutes: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnRouteAssignment>, assignedDomainName: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnDomainNameAssignment>, mtuSize: #if reflaxe.cpp cxx.num. #else cpp. #end UInt32, maxFrameSize: #if reflaxe.cpp cxx.num. #else cpp. #end UInt32, Reserved: Bool): Void;
    overload function ActivityStateChange(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.networking.vpn.VpnChannel, winrt.windows.networking.vpn.VpnChannelActivityStateChangedArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function ActivityStateChange(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    function GetVpnSendPacketBuffer(): winrt.windows.networking.vpn.VpnPacketBuffer;
    function GetVpnReceivePacketBuffer(): winrt.windows.networking.vpn.VpnPacketBuffer;
    function RequestCustomPromptAsync(customPromptElement: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IVectorView<winrt.windows.networking.vpn.IVpnCustomPromptElement> /* temp_GenericTypeInstSig */>): winrt.windows.foundation.IAsyncAction;
    overload function RequestCredentialsAsync(credType: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnCredentialType>, credOptions: #if reflaxe.cpp cxx.num. #else cpp. #end UInt32, certificate: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.security.cryptography.certificates.Certificate>): winrt.windows.foundation.IAsyncOperation<winrt.windows.networking.vpn.VpnCredential> /* GenericTypeInstSig */;
    overload function RequestCredentialsAsync(credType: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnCredentialType>, credOptions: #if reflaxe.cpp cxx.num. #else cpp. #end UInt32): winrt.windows.foundation.IAsyncOperation<winrt.windows.networking.vpn.VpnCredential> /* GenericTypeInstSig */;
    overload function RequestCredentialsAsync(credType: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnCredentialType>): winrt.windows.foundation.IAsyncOperation<winrt.windows.networking.vpn.VpnCredential> /* GenericTypeInstSig */;
    function TerminateConnection(message: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>): Void;
    function StartWithTrafficFilter(assignedClientIpv4List: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IVectorView<winrt.windows.networking.HostName> /* temp_GenericTypeInstSig */>, assignedClientIpv6List: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.collections.IVectorView<winrt.windows.networking.HostName> /* temp_GenericTypeInstSig */>, vpnInterfaceId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnInterfaceId>, assignedRoutes: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnRouteAssignment>, assignedNamespace: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnDomainNameAssignment>, mtuSize: #if reflaxe.cpp cxx.num. #else cpp. #end UInt32, maxFrameSize: #if reflaxe.cpp cxx.num. #else cpp. #end UInt32, reserved: Bool, mainOuterTunnelTransport: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.IInspectable>, optionalOuterTunnelTransport: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.IInspectable>, assignedTrafficFilters: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.networking.vpn.VpnTrafficFilterAssignment>): Void;
}
