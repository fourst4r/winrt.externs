package winrt.windows.applicationmodel.store.preview.installcontrol;

@:valueType
@:unreflective
@:structAccess
@:semantics(variable)
@:include("winrt/Windows.ApplicationModel.Store.Preview.InstallControl.h", true)
@:native("winrt::Windows::ApplicationModel::Store::Preview::InstallControl::IAppInstallManager6")
extern interface IAppInstallManager6 extends winrt.windows.foundation.IInspectable
{
    function SearchForAllUpdatesAsync(correlationVector: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, clientId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, updateOptions: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.applicationmodel.store.preview.installcontrol.AppUpdateOptions>): winrt.windows.foundation.IAsyncOperation<winrt.windows.foundation.collections.IVectorView<winrt.windows.applicationmodel.store.preview.installcontrol.AppInstallItem> /* GenericTypeInstSig */> /* GenericTypeInstSig */;
    function SearchForAllUpdatesForUserAsync(user: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.system.User>, correlationVector: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, clientId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, updateOptions: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.applicationmodel.store.preview.installcontrol.AppUpdateOptions>): winrt.windows.foundation.IAsyncOperation<winrt.windows.foundation.collections.IVectorView<winrt.windows.applicationmodel.store.preview.installcontrol.AppInstallItem> /* GenericTypeInstSig */> /* GenericTypeInstSig */;
    function SearchForUpdatesAsync(productId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, skuId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, correlationVector: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, clientId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, updateOptions: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.applicationmodel.store.preview.installcontrol.AppUpdateOptions>): winrt.windows.foundation.IAsyncOperation<winrt.windows.applicationmodel.store.preview.installcontrol.AppInstallItem> /* GenericTypeInstSig */;
    function SearchForUpdatesForUserAsync(user: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.system.User>, productId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, skuId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, correlationVector: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, clientId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, updateOptions: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.applicationmodel.store.preview.installcontrol.AppUpdateOptions>): winrt.windows.foundation.IAsyncOperation<winrt.windows.applicationmodel.store.preview.installcontrol.AppInstallItem> /* GenericTypeInstSig */;
    function StartProductInstallAsync(productId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, flightId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, clientId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, correlationVector: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, installOptions: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.applicationmodel.store.preview.installcontrol.AppInstallOptions>): winrt.windows.foundation.IAsyncOperation<winrt.windows.foundation.collections.IVectorView<winrt.windows.applicationmodel.store.preview.installcontrol.AppInstallItem> /* GenericTypeInstSig */> /* GenericTypeInstSig */;
    function StartProductInstallForUserAsync(user: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.system.User>, productId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, flightId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, clientId: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, correlationVector: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, installOptions: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.applicationmodel.store.preview.installcontrol.AppInstallOptions>): winrt.windows.foundation.IAsyncOperation<winrt.windows.foundation.collections.IVectorView<winrt.windows.applicationmodel.store.preview.installcontrol.AppInstallItem> /* GenericTypeInstSig */> /* GenericTypeInstSig */;
    function GetIsPackageIdentityAllowedToInstallAsync(correlationVector: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, packageIdentityName: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, publisherCertificateName: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>): winrt.windows.foundation.IAsyncOperation<Bool> /* GenericTypeInstSig */;
    function GetIsPackageIdentityAllowedToInstallForUserAsync(user: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.system.User>, correlationVector: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, packageIdentityName: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, publisherCertificateName: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>): winrt.windows.foundation.IAsyncOperation<Bool> /* GenericTypeInstSig */;
}
