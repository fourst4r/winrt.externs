package winrt.windows.ui.xaml;

@:valueType
@:unreflective
@:structAccess
@:semantics(variable)
@:include("winrt/Windows.UI.Xaml.h", true)
@:native("winrt::Windows::UI::Xaml::UIElement")
extern class UIElement
    extends winrt.windows.ui.xaml.DependencyObject
    implements winrt.windows.ui.xaml.IUIElement
    implements winrt.windows.ui.xaml.IUIElement2
    implements winrt.windows.ui.xaml.IUIElement3
    implements winrt.windows.ui.xaml.IUIElement4
    implements winrt.windows.ui.xaml.IUIElement5
    implements winrt.windows.ui.xaml.IUIElement7
    implements winrt.windows.ui.xaml.IUIElement8
    implements winrt.windows.ui.xaml.IUIElement9
    implements winrt.windows.ui.xaml.IUIElement10
    implements winrt.windows.ui.xaml.IUIElementOverrides
    implements winrt.windows.ui.xaml.IUIElementOverrides7
    implements winrt.windows.ui.xaml.IUIElementOverrides8
    implements winrt.windows.ui.xaml.IUIElementOverrides9
    implements winrt.windows.ui.composition.IAnimationObject
    implements winrt.windows.ui.composition.IVisualElement
{
    overload function DesiredSize(): winrt.windows.foundation.Size;
    overload function AllowDrop(): Bool;
    overload function AllowDrop(value: Bool): Void;
    overload function Opacity(): #if reflaxe.cpp cxx.num. #else cpp. #end Float64;
    overload function Opacity(value: #if reflaxe.cpp cxx.num. #else cpp. #end Float64): Void;
    overload function Clip(): winrt.windows.ui.xaml.media.RectangleGeometry;
    overload function Clip(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.media.RectangleGeometry>): Void;
    overload function RenderTransform(): winrt.windows.ui.xaml.media.Transform;
    overload function RenderTransform(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.media.Transform>): Void;
    overload function Projection(): winrt.windows.ui.xaml.media.Projection;
    overload function Projection(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.media.Projection>): Void;
    overload function RenderTransformOrigin(): winrt.windows.foundation.Point;
    overload function RenderTransformOrigin(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.Point>): Void;
    overload function IsHitTestVisible(): Bool;
    overload function IsHitTestVisible(value: Bool): Void;
    overload function Visibility(): winrt.windows.ui.xaml.Visibility;
    overload function Visibility(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.Visibility>): Void;
    overload function RenderSize(): winrt.windows.foundation.Size;
    overload function UseLayoutRounding(): Bool;
    overload function UseLayoutRounding(value: Bool): Void;
    overload function Transitions(): winrt.windows.ui.xaml.media.animation.TransitionCollection;
    overload function Transitions(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.media.animation.TransitionCollection>): Void;
    overload function CacheMode(): winrt.windows.ui.xaml.media.CacheMode;
    overload function CacheMode(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.media.CacheMode>): Void;
    overload function IsTapEnabled(): Bool;
    overload function IsTapEnabled(value: Bool): Void;
    overload function IsDoubleTapEnabled(): Bool;
    overload function IsDoubleTapEnabled(value: Bool): Void;
    overload function IsRightTapEnabled(): Bool;
    overload function IsRightTapEnabled(value: Bool): Void;
    overload function IsHoldingEnabled(): Bool;
    overload function IsHoldingEnabled(value: Bool): Void;
    overload function ManipulationMode(): winrt.windows.ui.xaml.input.ManipulationModes;
    overload function ManipulationMode(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.ManipulationModes>): Void;
    overload function PointerCaptures(): winrt.windows.foundation.collections.IVectorView<winrt.windows.ui.xaml.input.Pointer> /* GenericTypeInstSig */;
    overload function KeyUp(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.KeyEventHandler>): winrt.EventToken;
    @:noExcept overload function KeyUp(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function KeyDown(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.KeyEventHandler>): winrt.EventToken;
    @:noExcept overload function KeyDown(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function GotFocus(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.RoutedEventHandler>): winrt.EventToken;
    @:noExcept overload function GotFocus(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function LostFocus(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.RoutedEventHandler>): winrt.EventToken;
    @:noExcept overload function LostFocus(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function DragEnter(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.DragEventHandler>): winrt.EventToken;
    @:noExcept overload function DragEnter(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function DragLeave(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.DragEventHandler>): winrt.EventToken;
    @:noExcept overload function DragLeave(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function DragOver(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.DragEventHandler>): winrt.EventToken;
    @:noExcept overload function DragOver(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function Drop(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.DragEventHandler>): winrt.EventToken;
    @:noExcept overload function Drop(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PointerPressed(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.PointerEventHandler>): winrt.EventToken;
    @:noExcept overload function PointerPressed(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PointerMoved(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.PointerEventHandler>): winrt.EventToken;
    @:noExcept overload function PointerMoved(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PointerReleased(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.PointerEventHandler>): winrt.EventToken;
    @:noExcept overload function PointerReleased(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PointerEntered(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.PointerEventHandler>): winrt.EventToken;
    @:noExcept overload function PointerEntered(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PointerExited(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.PointerEventHandler>): winrt.EventToken;
    @:noExcept overload function PointerExited(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PointerCaptureLost(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.PointerEventHandler>): winrt.EventToken;
    @:noExcept overload function PointerCaptureLost(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PointerCanceled(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.PointerEventHandler>): winrt.EventToken;
    @:noExcept overload function PointerCanceled(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PointerWheelChanged(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.PointerEventHandler>): winrt.EventToken;
    @:noExcept overload function PointerWheelChanged(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function Tapped(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.TappedEventHandler>): winrt.EventToken;
    @:noExcept overload function Tapped(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function DoubleTapped(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.DoubleTappedEventHandler>): winrt.EventToken;
    @:noExcept overload function DoubleTapped(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function Holding(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.HoldingEventHandler>): winrt.EventToken;
    @:noExcept overload function Holding(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function RightTapped(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.RightTappedEventHandler>): winrt.EventToken;
    @:noExcept overload function RightTapped(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function ManipulationStarting(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.ManipulationStartingEventHandler>): winrt.EventToken;
    @:noExcept overload function ManipulationStarting(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function ManipulationInertiaStarting(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.ManipulationInertiaStartingEventHandler>): winrt.EventToken;
    @:noExcept overload function ManipulationInertiaStarting(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function ManipulationStarted(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.ManipulationStartedEventHandler>): winrt.EventToken;
    @:noExcept overload function ManipulationStarted(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function ManipulationDelta(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.ManipulationDeltaEventHandler>): winrt.EventToken;
    @:noExcept overload function ManipulationDelta(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function ManipulationCompleted(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.ManipulationCompletedEventHandler>): winrt.EventToken;
    @:noExcept overload function ManipulationCompleted(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    function Measure(availableSize: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.Size>): Void;
    function Arrange(finalRect: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.Rect>): Void;
    function CapturePointer(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.Pointer>): Bool;
    function ReleasePointerCapture(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.Pointer>): Void;
    function ReleasePointerCaptures(): Void;
    function AddHandler(routedEvent: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.RoutedEvent>, handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.IInspectable>, handledEventsToo: Bool): Void;
    function RemoveHandler(routedEvent: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.RoutedEvent>, handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.IInspectable>): Void;
    function TransformToVisual(visual: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.UIElement>): winrt.windows.ui.xaml.media.GeneralTransform;
    function InvalidateMeasure(): Void;
    function InvalidateArrange(): Void;
    function UpdateLayout(): Void;
    overload function CompositeMode(): winrt.windows.ui.xaml.media.ElementCompositeMode;
    overload function CompositeMode(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.media.ElementCompositeMode>): Void;
    function CancelDirectManipulations(): Bool;
    overload function Transform3D(): winrt.windows.ui.xaml.media.media3d.Transform3D;
    overload function Transform3D(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.media.media3d.Transform3D>): Void;
    overload function CanDrag(): Bool;
    overload function CanDrag(value: Bool): Void;
    overload function DragStarting(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.DragStartingEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function DragStarting(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function DropCompleted(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.DropCompletedEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function DropCompleted(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    function StartDragAsync(pointerPoint: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.input.PointerPoint>): winrt.windows.foundation.IAsyncOperation<winrt.windows.applicationmodel.datatransfer.DataPackageOperation> /* GenericTypeInstSig */;
    overload function ContextFlyout(): winrt.windows.ui.xaml.controls.primitives.FlyoutBase;
    overload function ContextFlyout(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.controls.primitives.FlyoutBase>): Void;
    overload function ExitDisplayModeOnAccessKeyInvoked(): Bool;
    overload function ExitDisplayModeOnAccessKeyInvoked(value: Bool): Void;
    overload function IsAccessKeyScope(): Bool;
    overload function IsAccessKeyScope(value: Bool): Void;
    overload function AccessKeyScopeOwner(): winrt.windows.ui.xaml.DependencyObject;
    overload function AccessKeyScopeOwner(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.DependencyObject>): Void;
    overload function AccessKey(): winrt.HString;
    overload function AccessKey(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>): Void;
    overload function ContextRequested(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.input.ContextRequestedEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function ContextRequested(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function ContextCanceled(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.RoutedEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function ContextCanceled(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function AccessKeyDisplayRequested(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.input.AccessKeyDisplayRequestedEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function AccessKeyDisplayRequested(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function AccessKeyDisplayDismissed(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.input.AccessKeyDisplayDismissedEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function AccessKeyDisplayDismissed(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function AccessKeyInvoked(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.input.AccessKeyInvokedEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function AccessKeyInvoked(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function Lights(): winrt.windows.foundation.collections.IVector<winrt.windows.ui.xaml.media.XamlLight> /* GenericTypeInstSig */;
    overload function KeyTipPlacementMode(): winrt.windows.ui.xaml.input.KeyTipPlacementMode;
    overload function KeyTipPlacementMode(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.KeyTipPlacementMode>): Void;
    overload function KeyTipHorizontalOffset(): #if reflaxe.cpp cxx.num. #else cpp. #end Float64;
    overload function KeyTipHorizontalOffset(value: #if reflaxe.cpp cxx.num. #else cpp. #end Float64): Void;
    overload function KeyTipVerticalOffset(): #if reflaxe.cpp cxx.num. #else cpp. #end Float64;
    overload function KeyTipVerticalOffset(value: #if reflaxe.cpp cxx.num. #else cpp. #end Float64): Void;
    overload function XYFocusKeyboardNavigation(): winrt.windows.ui.xaml.input.XYFocusKeyboardNavigationMode;
    overload function XYFocusKeyboardNavigation(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.XYFocusKeyboardNavigationMode>): Void;
    overload function XYFocusUpNavigationStrategy(): winrt.windows.ui.xaml.input.XYFocusNavigationStrategy;
    overload function XYFocusUpNavigationStrategy(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.XYFocusNavigationStrategy>): Void;
    overload function XYFocusDownNavigationStrategy(): winrt.windows.ui.xaml.input.XYFocusNavigationStrategy;
    overload function XYFocusDownNavigationStrategy(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.XYFocusNavigationStrategy>): Void;
    overload function XYFocusLeftNavigationStrategy(): winrt.windows.ui.xaml.input.XYFocusNavigationStrategy;
    overload function XYFocusLeftNavigationStrategy(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.XYFocusNavigationStrategy>): Void;
    overload function XYFocusRightNavigationStrategy(): winrt.windows.ui.xaml.input.XYFocusNavigationStrategy;
    overload function XYFocusRightNavigationStrategy(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.XYFocusNavigationStrategy>): Void;
    overload function HighContrastAdjustment(): winrt.windows.ui.xaml.ElementHighContrastAdjustment;
    overload function HighContrastAdjustment(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.ElementHighContrastAdjustment>): Void;
    overload function TabFocusNavigation(): winrt.windows.ui.xaml.input.KeyboardNavigationMode;
    overload function TabFocusNavigation(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.KeyboardNavigationMode>): Void;
    overload function GettingFocus(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.input.GettingFocusEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function GettingFocus(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function LosingFocus(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.input.LosingFocusEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function LosingFocus(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function NoFocusCandidateFound(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.input.NoFocusCandidateFoundEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function NoFocusCandidateFound(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function StartBringIntoView(): Void;
    overload function StartBringIntoView(options: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.BringIntoViewOptions>): Void;
    overload function KeyboardAccelerators(): winrt.windows.foundation.collections.IVector<winrt.windows.ui.xaml.input.KeyboardAccelerator> /* GenericTypeInstSig */;
    overload function CharacterReceived(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.input.CharacterReceivedRoutedEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function CharacterReceived(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function ProcessKeyboardAccelerators(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.input.ProcessKeyboardAcceleratorEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function ProcessKeyboardAccelerators(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PreviewKeyDown(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.KeyEventHandler>): winrt.EventToken;
    @:noExcept overload function PreviewKeyDown(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function PreviewKeyUp(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.KeyEventHandler>): winrt.EventToken;
    @:noExcept overload function PreviewKeyUp(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    function TryInvokeKeyboardAccelerator(args: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.ProcessKeyboardAcceleratorEventArgs>): Void;
    overload function KeyTipTarget(): winrt.windows.ui.xaml.DependencyObject;
    overload function KeyTipTarget(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.DependencyObject>): Void;
    overload function KeyboardAcceleratorPlacementTarget(): winrt.windows.ui.xaml.DependencyObject;
    overload function KeyboardAcceleratorPlacementTarget(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.DependencyObject>): Void;
    overload function KeyboardAcceleratorPlacementMode(): winrt.windows.ui.xaml.input.KeyboardAcceleratorPlacementMode;
    overload function KeyboardAcceleratorPlacementMode(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.KeyboardAcceleratorPlacementMode>): Void;
    overload function BringIntoViewRequested(handler: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.TypedEventHandler<winrt.windows.ui.xaml.UIElement, winrt.windows.ui.xaml.BringIntoViewRequestedEventArgs> /* temp_GenericTypeInstSig */>): winrt.EventToken;
    @:noExcept overload function BringIntoViewRequested(token: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.EventToken>): Void;
    overload function CanBeScrollAnchor(): Bool;
    overload function CanBeScrollAnchor(value: Bool): Void;
    overload function OpacityTransition(): winrt.windows.ui.xaml.ScalarTransition;
    overload function OpacityTransition(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.ScalarTransition>): Void;
    overload function Translation(): winrt.windows.foundation.numerics.Vector3;
    overload function Translation(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.numerics.Vector3>): Void;
    overload function TranslationTransition(): winrt.windows.ui.xaml.Vector3Transition;
    overload function TranslationTransition(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.Vector3Transition>): Void;
    overload function Rotation(): #if reflaxe.cpp cxx.num. #else cpp. #end Float32;
    overload function Rotation(value: #if reflaxe.cpp cxx.num. #else cpp. #end Float32): Void;
    overload function RotationTransition(): winrt.windows.ui.xaml.ScalarTransition;
    overload function RotationTransition(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.ScalarTransition>): Void;
    overload function Scale(): winrt.windows.foundation.numerics.Vector3;
    overload function Scale(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.numerics.Vector3>): Void;
    overload function ScaleTransition(): winrt.windows.ui.xaml.Vector3Transition;
    overload function ScaleTransition(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.Vector3Transition>): Void;
    overload function TransformMatrix(): winrt.windows.foundation.numerics.Matrix4x4;
    overload function TransformMatrix(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.numerics.Matrix4x4>): Void;
    overload function CenterPoint(): winrt.windows.foundation.numerics.Vector3;
    overload function CenterPoint(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.numerics.Vector3>): Void;
    overload function RotationAxis(): winrt.windows.foundation.numerics.Vector3;
    overload function RotationAxis(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.numerics.Vector3>): Void;
    function StartAnimation(animation: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.composition.ICompositionAnimationBase>): Void;
    function StopAnimation(animation: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.composition.ICompositionAnimationBase>): Void;
    overload function ActualOffset(): winrt.windows.foundation.numerics.Vector3;
    overload function ActualSize(): winrt.windows.foundation.numerics.Vector2;
    overload function XamlRoot(): winrt.windows.ui.xaml.XamlRoot;
    overload function XamlRoot(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.XamlRoot>): Void;
    overload function UIContext(): winrt.windows.ui.UIContext;
    overload function Shadow(): winrt.windows.ui.xaml.media.Shadow;
    overload function Shadow(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.media.Shadow>): Void;
    function OnCreateAutomationPeer(): winrt.windows.ui.xaml.automation.peers.AutomationPeer;
    function OnDisconnectVisualChildren(): Void;
    function FindSubElementsForTouchTargeting(point: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.Point>, boundingRect: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.foundation.Rect>): winrt.windows.foundation.collections.IIterable<winrt.windows.foundation.collections.IIterable<winrt.windows.foundation.Point> /* GenericTypeInstSig */> /* GenericTypeInstSig */;
    function GetChildrenInTabFocusOrder(): winrt.windows.foundation.collections.IIterable<winrt.windows.ui.xaml.DependencyObject> /* GenericTypeInstSig */;
    function OnProcessKeyboardAccelerators(args: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.ProcessKeyboardAcceleratorEventArgs>): Void;
    function OnKeyboardAcceleratorInvoked(args: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.KeyboardAcceleratorInvokedEventArgs>): Void;
    function OnBringIntoViewRequested(e: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.BringIntoViewRequestedEventArgs>): Void;
    function PopulatePropertyInfoOverride(propertyName: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, animationPropertyInfo: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.composition.AnimationPropertyInfo>): Void;
    function PopulatePropertyInfo(propertyName: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.HString>, propertyInfo: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.composition.AnimationPropertyInfo>): Void;
    overload function ShadowProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function CanBeScrollAnchorProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function BringIntoViewRequestedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function ContextRequestedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function KeyTipTargetProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function KeyboardAcceleratorPlacementTargetProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function KeyboardAcceleratorPlacementModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    function RegisterAsScrollPort(element: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.UIElement>): Void;
    overload function PreviewKeyDownEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function CharacterReceivedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function PreviewKeyUpEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function GettingFocusEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function LosingFocusEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function NoFocusCandidateFoundEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function LightsProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function KeyTipPlacementModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function KeyTipHorizontalOffsetProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function KeyTipVerticalOffsetProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function XYFocusKeyboardNavigationProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function XYFocusUpNavigationStrategyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function XYFocusDownNavigationStrategyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function XYFocusLeftNavigationStrategyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function XYFocusRightNavigationStrategyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function HighContrastAdjustmentProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function TabFocusNavigationProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function ContextFlyoutProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function ExitDisplayModeOnAccessKeyInvokedProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function IsAccessKeyScopeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function AccessKeyScopeOwnerProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function AccessKeyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function Transform3DProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function CanDragProperty(): winrt.windows.ui.xaml.DependencyProperty;
    function TryStartDirectManipulation(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.Pointer>): Bool;
    overload function CompositeModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function KeyDownEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function KeyUpEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function PointerEnteredEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function PointerPressedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function PointerMovedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function PointerReleasedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function PointerExitedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function PointerCaptureLostEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function PointerCanceledEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function PointerWheelChangedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function TappedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function DoubleTappedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function HoldingEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function RightTappedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function ManipulationStartingEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function ManipulationInertiaStartingEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function ManipulationStartedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function ManipulationDeltaEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function ManipulationCompletedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function DragEnterEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function DragLeaveEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function DragOverEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function DropEvent(): winrt.windows.ui.xaml.RoutedEvent;
    overload function AllowDropProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function OpacityProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function ClipProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function RenderTransformProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function ProjectionProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function RenderTransformOriginProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function IsHitTestVisibleProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function VisibilityProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function UseLayoutRoundingProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function TransitionsProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function CacheModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function IsTapEnabledProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function IsDoubleTapEnabledProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function IsRightTapEnabledProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function IsHoldingEnabledProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function ManipulationModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    overload function PointerCapturesProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function KeyDownEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function KeyUpEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PointerEnteredEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PointerPressedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PointerMovedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PointerReleasedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PointerExitedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PointerCaptureLostEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PointerCanceledEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PointerWheelChangedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function TappedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function DoubleTappedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function HoldingEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function RightTappedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function ManipulationStartingEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function ManipulationInertiaStartingEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function ManipulationStartedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function ManipulationDeltaEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function ManipulationCompletedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function DragEnterEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function DragLeaveEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function DragOverEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function DropEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function AllowDropProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function OpacityProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function ClipProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function RenderTransformProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function ProjectionProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function RenderTransformOriginProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function IsHitTestVisibleProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function VisibilityProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function UseLayoutRoundingProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function TransitionsProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function CacheModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function IsTapEnabledProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function IsDoubleTapEnabledProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function IsRightTapEnabledProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function IsHoldingEnabledProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function ManipulationModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function PointerCapturesProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function ShadowProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function CompositeModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function Transform3DProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function CanDragProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static function TryStartDirectManipulation(value: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.input.Pointer>): Bool;
    static overload function ContextFlyoutProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function ExitDisplayModeOnAccessKeyInvokedProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function IsAccessKeyScopeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function AccessKeyScopeOwnerProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function AccessKeyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function LightsProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function KeyTipPlacementModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function KeyTipHorizontalOffsetProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function KeyTipVerticalOffsetProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function XYFocusKeyboardNavigationProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function XYFocusUpNavigationStrategyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function XYFocusDownNavigationStrategyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function XYFocusLeftNavigationStrategyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function XYFocusRightNavigationStrategyProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function HighContrastAdjustmentProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function TabFocusNavigationProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function GettingFocusEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function LosingFocusEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function NoFocusCandidateFoundEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PreviewKeyDownEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function CharacterReceivedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function PreviewKeyUpEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function BringIntoViewRequestedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function ContextRequestedEvent(): winrt.windows.ui.xaml.RoutedEvent;
    static overload function KeyTipTargetProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function KeyboardAcceleratorPlacementTargetProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static overload function KeyboardAcceleratorPlacementModeProperty(): winrt.windows.ui.xaml.DependencyProperty;
    static function RegisterAsScrollPort(element: #if reflaxe.cpp cxx.ConstRef #else cpp.Reference #end <winrt.windows.ui.xaml.UIElement>): Void;
    static overload function CanBeScrollAnchorProperty(): winrt.windows.ui.xaml.DependencyProperty;
}
