package winrt.windows.devices.pointofservice;

@:include("winrt/Windows.Devices.PointOfService.h", true)
@:native("winrt::Windows::Devices::PointOfService::BarcodeSymbologies")
extern class BarcodeSymbologies
{
    static overload function Unknown(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ean8(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ean8Add2(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ean8Add5(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Eanv(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function EanvAdd2(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function EanvAdd5(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ean13(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ean13Add2(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ean13Add5(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Isbn(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function IsbnAdd5(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ismn(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function IsmnAdd2(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function IsmnAdd5(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Issn(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function IssnAdd2(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function IssnAdd5(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ean99(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ean99Add2(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ean99Add5(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Upca(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UpcaAdd2(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UpcaAdd5(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Upce(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UpceAdd2(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UpceAdd5(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UpcCoupon(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function TfStd(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function TfDis(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function TfInt(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function TfInd(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function TfMat(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function TfIata(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Gs1DatabarType1(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Gs1DatabarType2(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Gs1DatabarType3(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Code39(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Code39Ex(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Trioptic39(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Code32(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Pzn(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Code93(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Code93Ex(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Code128(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Gs1128(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Gs1128Coupon(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UccEan128(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Sisac(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Isbt(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Codabar(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Code11(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Msi(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Plessey(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Telepen(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Code16k(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function CodablockA(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function CodablockF(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Codablock128(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Code49(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Aztec(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function DataCode(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function DataMatrix(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function HanXin(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Maxicode(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function MicroPdf417(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function MicroQr(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Pdf417(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Qr(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function MsTag(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ccab(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Ccc(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Tlc39(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function AusPost(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function CanPost(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function ChinaPost(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function DutchKix(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function InfoMail(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function ItalianPost25(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function ItalianPost39(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function JapanPost(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function KoreanPost(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function SwedenPost(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UkPost(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UsIntelligent(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UsIntelligentPkg(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UsPlanet(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function UsPostNet(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Us4StateFics(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function OcrA(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function OcrB(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function Micr(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static overload function ExtendedBase(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
    static function GetName(scanDataType: #if reflaxe.cpp cxx.num. #else cpp. #end UInt32): winrt.HString;
    static overload function Gs1DWCode(): #if reflaxe.cpp cxx.num. #else cpp. #end UInt32;
}
